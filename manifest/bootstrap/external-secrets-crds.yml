# Create a ServiceAccount specifically for this task
apiVersion: v1
kind: ServiceAccount
metadata:
  name: crd-installer
  namespace: external-secrets
  annotations:
    argocd.argoproj.io/sync-wave: "-7"
    argocd.argoproj.io/hook: PreSync
---
# Create a ClusterRole with just the permissions needed
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crd-installer
  annotations:
    argocd.argoproj.io/sync-wave: "-7"
    argocd.argoproj.io/hook: PreSync
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "patch"]
---
# Bind the role to the ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crd-installer
  annotations:
    argocd.argoproj.io/sync-wave: "-6"
    argocd.argoproj.io/hook: PreSync
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crd-installer
subjects:
  - kind: ServiceAccount
    name: crd-installer
    namespace: external-secrets
---
# Your Job using the new ServiceAccount
apiVersion: batch/v1
kind: Job
metadata:
  name: install-external-secrets-crds
  namespace: external-secrets
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      serviceAccountName: crd-installer # Use the new SA
      containers:
        - name: install-crds
          image: bitnami/kubectl:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              kubectl apply --server-side=true --force-conflicts \
                -f https://raw.githubusercontent.com/external-secrets/external-secrets/v0.20.4/deploy/crds/bundle.yaml
      restartPolicy: OnFailure
